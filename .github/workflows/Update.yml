# This workflow pulls toykeepers repository on launchpad and clean up non anduril2 files.
# Then it commits the new changes to the repository

name: Update Anduril

on:
  schedule:
    - cron:  '35 8,20 * * *' # min 35 to avoid beginning of the hour congestion. 8am and 8pm

  # Allows manual trigger from the Actions tab
  workflow_dispatch:

jobs:
  Update-Check:
    runs-on: ubuntu-latest

    outputs:
      UPDATE: ${{ steps.update-Check.outputs.UPDATE }}
      GIT_MESSAGE: ${{ steps.info.outputs.GIT_MESSAGE }}
      REVNO: ${{ steps.info.outputs.REVNO }}


    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Pull from dependency cache  
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: bzr
          version: 1.0
        
      - name: Install dependencies
        run: sudo apt install bzr

      # get the revision number from launchpad and compare it to the last revision the repo has
      - name: Check for update
        id: update-check
        run: |
          [ -f ${{github.workspace}}/revno ]  && revnoExists="true" || revnoExists="false"

          #if the repo has a revno file compare it to the latest revision on launchpad. if the revno file is missing we need to update
          update=$(if [ "$revnoExists" == "true" ]; then if (( "$(cat ${{github.workspace}}/revno)" < "$(bzr revno lp:~toykeeper/flashlight-firmware/anduril2)" )); then echo "true"; else echo "false"; fi; else echo "true"; fi)

          #push update variable to step outputs
          echo "UPDATE=$update" >> $GITHUB_OUTPUT

      - name: Get Change Info
        id: info
        if: ${{steps.update-check.outputs.UPDATE == 'true'}}
        run: |
          [ -f ${{github.workspace}}/revno ]  && revnoExists="true" || revnoExists="false"

          #if the revno file exists calculate how many revisions are missing and pull all the change logs. if file is missing just get the latest change log
          gitmessage=$([ "$revnoExists" == "true" ] && bzr log --short -l $(( "$(bzr revno lp:~toykeeper/flashlight-firmware/anduril2)" - "$(cat ${{github.workspace}}/revno)" )) lp:~toykeeper/flashlight-firmware/anduril2 || bzr log --short -l 1 lp:~toykeeper/flashlight-firmware/anduril2)

          #write the newest revno to the revno file
          bzr revno lp:~toykeeper/flashlight-firmware/anduril2 > ${{github.workspace}}/revno

          #create a random delimiter and send the multiline log messages to git outputs ending with the delimiter
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "GIT_MESSAGE<<$EOF" >> $GITHUB_OUTPUT
          echo "$gitmessage" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

          #send the revno to git env for later use
          echo "REVNO=$(bzr revno lp:~toykeeper/flashlight-firmware/anduril2)" >> $GITHUB_OUTPUT

      - name: Pull-Toykeeper/Anduril2
        id: pull
        if: ${{steps.update-check.outputs.UPDATE == 'true'}}
        run: |
          bzrRepositoryRoot=${{github.workspace}}/bzrTemp
          mkdir "$bzrRepositoryRoot"
          cd "$bzrRepositoryRoot" || exit

          #pull the toykeeper/anduril2 branch from launchpad
          bzr branch lp:~toykeeper/flashlight-firmware/anduril2

          #send bzr repo location to git env for later use
          echo "BZR_REPO_ROOT=$bzrRepositoryRoot" >> $GITHUB_ENV

      - name: Clean Repo
        id: clean
        if: ${{steps.update-check.outputs.UPDATE == 'true'}}
        run: |
          bzrRepositoryRoot=${{env.BZR_REPO_ROOT}}

          #remove directories and files listed in the CLEANLIST. all items in CLEANLIST are prepended with "$bzrRepositoryRoot"/anduril2/ToyKeeper/
          [ -f ${{github.workspace}}/CLEANLIST ] && xargs -a ${{github.workspace}}/CLEANLIST -I{} -d'\n' rm -rf "$bzrRepositoryRoot"/anduril2/ToyKeeper/{}

          #update ./build-all.sh with the new bin folder location
          sed -i "s/..\/..\/..\/bin\/build.sh/..\/..\/bin\/build.sh/g" "$bzrRepositoryRoot"/anduril2/ToyKeeper/spaghetti-monster/anduril/build-all.sh

          #add exit status if builds fail in build-all So the build workflow will function
          sed -i "s/echo \"FAIL:\$FAILED\"/echo \"FAIL:\$FAILED\"\n  exit 1/g" "$bzrRepositoryRoot"/anduril2/ToyKeeper/spaghetti-monster/anduril/build-all.sh

          #move bin folder into ToyKeeper
          mv -f "$bzrRepositoryRoot"/anduril2/bin/ "$bzrRepositoryRoot"/anduril2/ToyKeeper/

          #move license into ToyKeeper
          mv -f "$bzrRepositoryRoot"/anduril2/ToyKeeper/spaghetti-monster/COPYING "$bzrRepositoryRoot"/anduril2/ToyKeeper/LICENSE

          #copy cleaned up bzr repo to git repo root and delete temp files
          cd "$bzrRepositoryRoot"/anduril2/ToyKeeper/ || exit
          cp -rf ./* ${{github.workspace}}
          cd ${{github.workspace}} || exit #get out of the working directory before the rapture
          rm -rf "$bzrRepositoryRoot"

      - name: Commit Update
        if: ${{ steps.update-check.outputs.UPDATE == 'true' }}
        uses: EndBug/add-and-commit@v9
        with:
          message: ${{ steps.info.outputs.GIT_MESSAGE }}
          default_author: github_actions


#create release so the build action is triggered
  release:
    if: ${{needs.Update-Check.outputs.UPDATE == 'true'}}
    needs: Update-Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }} #workaround so it triggers the other workflow :|
        with:
          tag_name: ${{ needs.Update-Check.outputs.REVNO }}
          release_name: Release ${{ needs.Update-Check.outputs.REVNO }}
          body: ${{ needs.Update-Check.outputs.GIT_MESSAGE }}
          draft: false
          prerelease: false
